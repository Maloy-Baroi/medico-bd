%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2384 762
%%HiResBoundingBox: 0 0 2383.9199 761.03998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2383.9199 761.03998 re
W
q
[0.24 0 0 -0.24 0 761.03998] cm
q
0 0 9933.334 3168.4177 re
W*
q
[43.528023 0 0 43.509964 -198.81708 191.89011] cm
q
31.997999 2 m
31.997999 2 10.977999 29.368999 10.977999 40.979 c
10.977999 52.589001 20.391001 62 32 62 c
43.609001 62 53.021 52.588001 53.021 40.979 c
53.021 29.369999 31.997999 2 31.997999 2 c
h
43.146 42.166 m
34.772999 42.166 l
34.772999 50.452999 l
29.204998 50.452999 l
29.204998 42.166 l
20.850998 42.166 l
20.850998 36.445999 l
29.204998 36.445999 l
29.204998 28.157999 l
34.772999 28.157999 l
34.772999 36.445999 l
43.146 36.445999 l
43.146 42.166 l
h
W
[42.042998 0 0 60 10.977998 2.000001] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
q
[25.026171 0 0 25.015789 2639.5295 1084.37036] cm
q
31.952999 38.5937 m
38.515499 38.5937 l
38.515499 11.1717 l
31.952999 20.781099 l
31.952999 38.594101 l
31.952999 38.5937 l
h
38.515999 1.406 m
31.484699 1.406 l
20.000698 19.219 l
8.594698 1.406 l
1.563398 1.406 l
1.563398 38.594002 l
8.125898 38.594002 l
8.125898 12.188002 l
19.844898 29.766001 l
20.079279 29.766001 l
30.313278 14.610001 l
30.365387 14.401641 33.099777 10.000601 38.51638 1.407001 c
38.515999 1.406 l
h
47.0938 1.406 m
74.906799 1.406 l
74.906799 7.3435 l
47.0938 7.3435 l
47.0938 1.406 l
47.0938 1.406 l
h
47.0938 32.6562 m
74.827797 32.6562 l
74.827797 38.5937 l
47.093796 38.5937 l
47.093796 32.6562 l
47.0938 32.6562 l
h
47.0938 16.875 m
72.171799 16.875 l
72.171799 22.7344 l
47.0938 22.7344 l
47.0938 16.875 l
h
114.813004 27.344 m
113.823395 29.739901 112.4692 31.719 110.750504 33.281502 c
108.979607 34.948101 106.896301 36.250301 104.500404 37.187801 c
102.104507 38.125301 99.422302 38.594101 96.453506 38.594101 c
87.781609 38.594101 l
87.781609 32.656601 l
96.375412 32.656601 l
98.354515 32.656601 100.151413 32.344101 101.766014 31.719101 c
103.328514 31.094101 104.682617 30.2087 105.828514 29.062801 c
106.974411 27.916903 107.859818 26.562801 108.484818 25.000301 c
109.109818 23.437801 109.422318 21.719002 109.422318 19.844002 c
109.422318 18.021101 109.109818 16.328402 108.484818 14.765902 c
107.859818 13.151301 106.974419 11.823202 105.828514 10.781502 c
104.786911 9.687702 103.432716 8.802402 101.766113 8.125202 c
100.09951 7.500202 98.302612 7.187702 96.375511 7.187702 c
87.781708 7.187702 l
87.781708 1.250202 l
96.453606 1.250202 l
99.214005 1.250202 101.870209 1.744972 104.422409 2.734602 c
106.818306 3.619992 108.927612 4.948102 110.750511 6.719002 c
112.521408 8.333602 113.875511 10.312802 114.813011 12.656502 c
115.80262 15.052402 116.297409 17.500301 116.297409 20.000301 c
116.297409 22.708702 115.802643 25.156601 114.813011 27.344101 c
114.813004 27.344 l
h
146.281006 16.875 m
146.281006 1.328 l
139.718506 1.328 l
139.718506 38.672001 l
146.281006 38.672001 l
146.281006 16.875 l
h
171.26559 12.5 m
172.20309 10.2084 173.55719 8.255301 175.32799 6.6407 c
176.94258 5.0261 179.02599 3.724 181.57809 2.7344 c
184.1302 1.7448 186.8125 1.25 189.625 1.25 c
198.29691 1.25 l
198.29691 7.1875 l
189.70311 7.1875 l
187.67181 7.1875 185.87502 7.52602 184.31252 8.2031 c
182.64592 8.88021 181.29172 9.7656 180.25012 10.8594 c
179.15633 11.901 178.27103 13.255199 177.59383 14.9218 c
176.96883 16.432199 176.65633 18.124899 176.65633 19.999901 c
176.65633 21.874903 176.96883 23.5676 177.59383 25.078001 c
178.21883 26.640501 179.10423 27.9946 180.25012 29.140501 c
181.29172 30.1821 182.64592 31.0415 184.31252 31.718601 c
185.97911 32.343601 187.77602 32.656101 189.70311 32.656101 c
198.29691 32.656101 l
198.29691 38.593601 l
189.625 38.593601 l
186.7084 38.593601 184.05209 38.124851 181.6562 37.187302 c
179.1562 36.145702 177.0468 34.817501 175.32811 33.2029 c
173.55721 31.536301 172.20311 29.5571 171.26561 27.265499 c
170.276 24.869598 169.7812 22.4217 169.7812 19.9217 c
169.7812 17.2654 170.27597 14.7915 171.26561 12.4998 c
171.26559 12.5 l
h
239.60899 25 m
239.24438 24.010389 238.72368 23.151199 238.0466 22.422001 c
237.57785 21.90114 236.8226 21.3022 235.78101 20.625 c
234.6351 20.052111 233.61951 19.6094 232.7341 19.2969 c
233.3591 18.932289 234.03619 18.51565 234.7654 18.0469 c
235.49454 17.4219 236.0414 16.822899 236.40599 16.25 c
236.87474 15.625 237.26537 14.8698 237.5779 13.9844 c
237.8904 13.0469 238.04665 12.0313 238.04665 10.9375 c
238.04665 8.0209 236.95285 5.7031 234.76535 3.9844 c
232.57785 2.265699 229.60905 1.4063 225.85905 1.4063 c
211.40605 1.4063 l
211.40605 7.1876 l
225.07805 7.1876 l
227.05714 7.1876 228.67184 7.60424 229.92184 8.4376 c
231.01564 9.27096 231.56244 10.468901 231.56244 12.031401 c
231.56244 13.802301 230.93744 15.078301 229.68744 15.859501 c
228.38535 16.692862 226.69264 17.109501 224.60924 17.109501 c
211.40623 17.109501 l
211.40623 22.5783 l
226.01523 22.5783 l
228.51523 22.5783 230.41623 23.02103 231.71832 23.906401 c
232.96832 24.843901 233.59332 26.093901 233.59332 27.656401 c
233.59332 29.323 232.96832 30.5991 231.71832 31.484402 c
230.41623 32.369793 228.67142 32.8125 226.48392 32.8125 c
211.40591 32.8125 l
211.40591 38.5938 l
226.40591 38.5938 l
228.43721 38.5938 230.31221 38.359421 232.03091 37.890671 c
233.80182 37.369812 235.23401 36.718769 236.32782 35.937572 c
237.42163 35.156376 238.35912 34.088573 239.14032 32.734474 c
239.76532 31.484474 240.07782 30.026073 240.07782 28.359474 c
240.07782 27.057375 239.92157 25.937574 239.60907 25.000074 c
239.60899 25 l
h
278.81299 27.344 m
277.82336 29.739901 276.46918 31.719 274.75049 33.281502 c
272.97958 34.948101 270.8963 36.250301 268.5004 37.187801 c
266.10449 38.125301 263.4223 38.594101 260.45349 38.594101 c
251.78159 38.594101 l
251.78159 32.656601 l
260.3754 32.656601 l
262.35449 32.656601 264.1514 32.344101 265.76599 31.719101 c
267.32849 31.094101 268.68259 30.2087 269.82849 29.062801 c
270.9744 27.916903 271.8598 26.562801 272.4848 25.000301 c
273.1098 23.437801 273.4223 21.719002 273.4223 19.844002 c
273.4223 18.021101 273.1098 16.328402 272.4848 14.765902 c
271.8598 13.151301 270.9744 11.823202 269.82849 10.781502 c
268.7869 9.687702 267.43268 8.802402 265.76608 8.125202 c
264.09949 7.500202 262.30258 7.187702 260.37549 7.187702 c
251.78169 7.187702 l
251.78169 1.250202 l
260.45358 1.250202 l
263.21399 1.250202 265.87018 1.744972 268.42239 2.734602 c
270.8183 3.619992 272.92758 4.948102 274.75049 6.719002 c
276.52139 8.333602 277.87549 10.312802 278.81299 12.656502 c
279.80261 15.052402 280.29739 17.500301 280.29739 20.000301 c
280.29739 22.708702 279.80261 25.156601 278.81299 27.344101 c
278.81299 27.344 l
h
W
[278.73402 0 0 37.422002 1.563398 1.249998] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
